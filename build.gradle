plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

def clientSourcesDir = layout.buildDirectory.dir('generated/sources/client/main/java')
def clientClassesDir = layout.buildDirectory.dir("generated/classes/client/class/main/java")

tasks.register('generateClientEnv', Copy) {
    from 'src/main/java'
    include '**/*BuildConfig.java'
    into clientSourcesDir
    filter { line -> line.replaceAll('TargetDistType.FULL', 'TargetDistType.CLIENT_ONLY') }

    group = 'other'
}

tasks.register('clientClasses', JavaCompile) {
    dependsOn generateClientEnv

    source clientSourcesDir
    include '**/*.java'

    classpath = sourceSets.main.compileClasspath
    destinationDirectory = clientClassesDir

    group = BasePlugin.BUILD_GROUP
}

tasks.register('jarClient', Jar) {
    dependsOn clientClasses

    archiveClassifier.set('client')
    from (sourceSets.main.output) {
        include '**/*'
        exclude '**/BuildConfig.class'
    }

    from(clientClassesDir) {
        include '**/BuildConfig.class'
    }
    group = BasePlugin.BUILD_GROUP
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set('api')
    include 'me/steinsut/inventorydeclutter/api/**/*'
    from sourceSets.main.output
    group = BasePlugin.BUILD_GROUP
}

tasks.register('apiJarClient', Jar) {
    archiveClassifier.set('client-api')
    include 'me/steinsut/inventorydeclutter/api/**/*'
    exclude '**/*MenuEntry*'
    exclude '**/*ScreenEntry*'
    from sourceSets.main.output
    group = BasePlugin.BUILD_GROUP
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
